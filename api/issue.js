/* eslint-disable linebreak-style */
/* eslint-disable no-alert */
/* eslint-disable linebreak-style */
/* eslint-disable no-undef */
/* eslint-disable linebreak-style */
const { UserInputError } = require('apollo-server-express');
const { getDb, getNextSequence } = require('./db.js');

async function list(_, { status }) {
  const db = getDb();
  const filter = {};
  if (status) filter.status = status;
  const issues = await db.collection('issues').find(filter).toArray();
  return issues;
}

function validate(issue) {
  const errors = [];
  if (issue.title.length < 3) {
    errors.push('Field "title" must be at least 3 characters long');
  }

  if (issue.status === 'Assigned' && !issue.owner) {
    errors.push('Field "owner" is required when status is "Assigned"');
  }

  if (errors.length > 0) {
    throw new UserInputError('Invalid input(s)', { errors });
  }
}

async function add(_, { issue }) {
  const db = getDb();
  validate(issue);
  const newIssue = Object.assign({}, issue);
  newIssue.created = new Date();
  // gets the id generated by the counters collection
  // in mongodb
  newIssue.id = await getNextSequence('issues');
  // console.log(`The new Issue Id is ${newIssue.id}`);
  // using the above id inserts the new issue
  // into mongodb
  const result = await db.collection('issues').insertOne(newIssue);

  // Looks in mongo db and finds the newly inserted issue
  const savedIssue = await db.collection('issues').findOne(
    { _id: result.insertedId },
  );


  return savedIssue;
}

module.exports = { list, add };
