{"version":3,"sources":["webpack:///./src/IssueList.jsx"],"names":["IssueList","React","Component","fetchData","match","search","showError","params","URLSearchParams","vars","hasSelection","selectedId","get","status","effortMin","parseInt","Number","isNaN","effortMax","id","idInt","query","data","graphQLFetch","constructor","issues","store","initialData","issueList","selectedIssue","state","toastVisible","toastMessage","toastType","closeIssue","bind","deleteIssue","showSuccess","dismissToast","componentDidMount","loadData","componentDidUpdate","prevProps","location","prevSearch","props","setState","index","prevState","newList","issueUpdate","pathname","history","issueDelete","push","splice","message","render","path","IssueDetail"],"mappings":"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","file":"server.265e1412b1657eea0f12.hot-update.js","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable import/no-cycle */\r\n/* eslint-disable import/no-named-as-default-member */\r\n/* eslint-disable react/prop-types */\r\n/* eslint \"react/jsx-no-undef\": \"off\" */\r\nimport React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport URLSearchParams from 'url-search-params';\r\nimport Card from 'react-bootstrap/Card';\r\nimport IssueFilter from './IssueFilter.jsx';\r\nimport IssueTable from './IssueTable.jsx';\r\nimport IssueDetail from './IssueDetail.jsx';\r\nimport graphQLFetch from './graphQLFetch.js';\r\nimport Toasts from './Toasts.jsx';\r\nimport store from './store.js';\r\n\r\nexport default class IssueList extends React.Component {\r\n  static async fetchData(match, search, showError) {\r\n    const params = new URLSearchParams(search);\r\n    const vars = { hasSelection: false, selectedId: 0 };\r\n    if (params.get('status')) vars.status = params.get('status');\r\n\r\n    const effortMin = parseInt(params.get('effortMin'), 10);\r\n    if (!Number.isNaN(effortMin)) vars.effortMin = effortMin;\r\n    const effortMax = parseInt(params.get('effortMax'), 10);\r\n    if (!Number.isNaN(effortMax)) vars.effortMax = effortMax;\r\n\r\n    const { params: { id } } = match;\r\n    const idInt = parseInt(id, 10);\r\n    if (!Number.isNaN(idInt)) {\r\n      vars.hasSelection = true;\r\n      vars.selectedId = idInt;\r\n    }\r\n\r\n    const query = `query issueList(\r\n      $status: StatusType\r\n      $effortMin: Int\r\n      $effortMax: Int\r\n      $hasSelection: Boolean!\r\n      $selectedId: Int!\r\n    ) {\r\n      issueList(\r\n        status: $status\r\n        effortMin: $effortMin\r\n        effortMax: $effortMax\r\n      ) {\r\n        id title status owner\r\n        created effort due\r\n      }\r\n      issue(id: $selectedId) @include (if : $hasSelection) {\r\n        id description\r\n      }\r\n    }`;\r\n\r\n    const data = await graphQLFetch(query, vars, showError);\r\n    return data;\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    const issues = store.initialData ? store.initialData.issueList : null;\r\n    const selectedIssue = store.initialData\r\n    delete store.initialData;\r\n    this.state = {\r\n      issues,\r\n      toastVisible: false,\r\n      toastMessage: ' ',\r\n      toastType: 'info',\r\n    };\r\n    this.closeIssue = this.closeIssue.bind(this);\r\n    this.deleteIssue = this.deleteIssue.bind(this);\r\n    this.showSuccess = this.showSuccess.bind(this);\r\n    this.showError = this.showError.bind(this);\r\n    this.dismissToast = this.dismissToast.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { issues } = this.state;\r\n    if (issues == null) this.loadData();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const {\r\n      location: { search: prevSearch },\r\n    } = prevProps;\r\n    const {\r\n      location: { search },\r\n    } = this.props;\r\n    if (prevSearch !== search) {\r\n      this.loadData();\r\n    }\r\n  }\r\n\r\n  async loadData() {\r\n    const { location: { search } } = this.props;\r\n    const data = await IssueList.fetchData(null, search, this.showError);\r\n    if (data) {\r\n      this.setState({ issues: data.issueList });\r\n    }\r\n  }\r\n\r\n  /*\r\n  // Handle the querystring param here for Issue Filter\r\n  async loadData() {\r\n    const {\r\n      location: { search },\r\n    } = this.props;\r\n    const params = new URLSearchParams(search);\r\n    const vars = {};\r\n    if (params.get('status')) vars.status = params.get('status');\r\n\r\n    // Adding in effortMin and effortMax parameters\r\n    const effortMin = parseInt(params.get('effortMin'), 10);\r\n    if (!Number.isNaN(effortMin)) vars.effortMin = effortMin;\r\n    const effortMax = parseInt(params.get('effortMax'), 10);\r\n    if (!Number.isNaN(effortMax)) vars.effortMax = effortMax;\r\n    const query = `query issueList(\r\n        $status: StatusType\r\n        $effortMin: Int\r\n        $effortMax: Int\r\n        ) {\r\n        issueList (\r\n          status: $status\r\n          effortMin: $effortMin\r\n          effortMax: $effortMax\r\n          ) {\r\n          id title status owner\r\n          created effort due\r\n        }\r\n      }`;\r\n\r\n    const data = await graphQLFetch(query, vars, this.showError);\r\n    if (data) {\r\n      this.setState({ issues: data.issueList });\r\n    }\r\n  }\r\n  */\r\n\r\n  async closeIssue(index) {\r\n    const query = `mutation issueClose($id: Int!) {\r\n        issueUpdate(id: $id, changes: { status: Closed }) {\r\n          id title status owner\r\n          effort created due description\r\n        }\r\n      }`;\r\n    const { issues } = this.state;\r\n    const data = await graphQLFetch(query, { id: issues[index].id }, this.showError);\r\n    if (data) {\r\n      this.setState((prevState) => {\r\n        const newList = [...prevState.issues];\r\n        newList[index] = data.issueUpdate;\r\n        return { issues: newList };\r\n      });\r\n    } else {\r\n      this.loadData();\r\n    }\r\n  }\r\n\r\n  async deleteIssue(index) {\r\n    const query = `mutation issueDelete($id: Int!) {\r\n      issueDelete(id: $id)\r\n    }`;\r\n    const { issues } = this.state;\r\n    const {\r\n      location: { pathname, search },\r\n      history,\r\n    } = this.props;\r\n    const { id } = issues[index];\r\n    const data = await graphQLFetch(query, { id }, this.showError);\r\n    if (data && data.issueDelete) {\r\n      this.setState((prevState) => {\r\n        const newList = [...prevState.issues];\r\n        if (pathname === `/issues/${id}`) {\r\n          history.push({ pathname: '/issues', search });\r\n        }\r\n        newList.splice(index, 1);\r\n        return { issues: newList };\r\n      });\r\n    } else {\r\n      this.loadData();\r\n    }\r\n  }\r\n\r\n  showSuccess(message) {\r\n    this.setState({\r\n      toastVisible: true,\r\n      toastMessage: message,\r\n      toastType: 'success',\r\n    });\r\n  }\r\n\r\n  showError(message) {\r\n    this.setState({\r\n      toastVisible: true,\r\n      toastMessage: message,\r\n      toastType: 'danger',\r\n    });\r\n  }\r\n\r\n  dismissToast() {\r\n    this.setState({ toastVisible: false });\r\n  }\r\n\r\n  render() {\r\n    const { issues } = this.state;\r\n    if (issues == null) return null;\r\n    // eslint-disable-next-line react/prop-types\r\n    const { match } = this.props;\r\n    const { toastVisible, toastMessage, toastType } = this.state;\r\n    return (\r\n      <>\r\n        <Card className=\"text-left bg-dark text-white\">\r\n          <Card.Header><h5>Filter</h5></Card.Header>\r\n          <Card.Body>\r\n            <IssueFilter />\r\n          </Card.Body>\r\n        </Card>\r\n        <div className=\"spacer\" />\r\n        <IssueTable\r\n          issues={issues}\r\n          closeIssue={this.closeIssue}\r\n          deleteIssue={this.deleteIssue}\r\n        />\r\n        <div className=\"spacer\" />\r\n        <Route path={`${match.path}/:id`} component={IssueDetail} />\r\n        <Toasts\r\n          showing={toastVisible}\r\n          onDismiss={this.dismissToast}\r\n          type={toastType}\r\n        >\r\n          {toastMessage}\r\n        </Toasts>\r\n      </>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}